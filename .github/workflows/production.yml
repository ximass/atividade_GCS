name: Production Deployment

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, dom, filter, gd, iconv, json, mbstring, pdo

      - name: Copy environment file
        run: cp .env.production .env

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

      - name: Generate application key
        run: php artisan key:generate

      - name: Clear and cache config
        run: |
          php artisan config:clear
          php artisan config:cache

      - name: Cache routes
        run: php artisan route:cache

      - name: Cache views
        run: php artisan view:cache

      - name: Run database migrations
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: php artisan migrate --force

      - name: Run tests
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: php artisan test

      - name: Run PHPUnit tests
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: testing
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: ./vendor/bin/phpunit
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && github.event_name == 'push'
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create database backup
        env:
          DB_PASSWORD: postgres
          PROD_DB_HOST: 177.44.248.74
          PROD_DB_PORT: 5432
          PROD_DB_NAME: production
          PROD_DB_USER: postgres
        run: |
          chmod +x scripts/backup-database.sh
          ./scripts/backup-database.sh production

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (Optional)
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd docker
          docker build -f Dockerfile -t laravel-production:${{ github.sha }} ..
          docker tag laravel-production:${{ github.sha }} laravel-production:latest

      - name: Deploy to production
        run: |
          cd docker
          # Store current container ID for potential rollback
          docker ps --format "table {{.ID}}\t{{.Names}}" | grep laravel-prod-app || true
          docker-compose -f docker-compose.prod.yml down || true
          docker-compose -f docker-compose.prod.yml up -d

      - name: Wait for services to be ready
        run: sleep 45

      - name: Run migrations on production
        run: |
          docker exec laravel-prod-app php artisan migrate --force

      - name: Clear and optimize application cache
        run: |
          docker exec laravel-prod-app php artisan cache:clear
          docker exec laravel-prod-app php artisan config:cache
          docker exec laravel-prod-app php artisan route:cache
          docker exec laravel-prod-app php artisan view:cache
          docker exec laravel-prod-app php artisan optimize

      - name: Health check with retry
        run: |
          sleep 15
          for i in {1..10}; do
            if curl -f http://localhost/health; then
              echo "‚úÖ Health check passed on attempt $i"
              break
            elif [ $i -eq 10 ]; then
              echo "‚ùå Health check failed after 10 attempts"
              exit 1
            else
              echo "‚è≥ Health check attempt $i failed, retrying in 15 seconds..."
              sleep 15
            fi
          done

      - name: Smoke tests
        run: |
          echo "Running smoke tests..."
          # Test main endpoints
          curl -f http://localhost/ || exit 1
          curl -f http://localhost/health || exit 1
          echo "‚úÖ Smoke tests passed"

      - name: Production deployment notification
        if: success()
        run: |
          echo "üéâ PRODUCTION DEPLOYMENT SUCCESSFUL!"
          echo "üìç Environment: Production"
          echo "üöÄ Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "‚è∞ Time: $(date)"
          echo "üîó Health Check: http://localhost/health"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "üí• PRODUCTION DEPLOYMENT FAILED!"
          echo "üîÑ Attempting automatic rollback..."
          cd docker
          docker-compose -f docker-compose.prod.yml down || true
          
          # Here you could implement logic to restore from backup
          echo "‚ö†Ô∏è  Manual intervention may be required"
          echo "üìã Backup available for restoration if needed"
          
          exit 1
